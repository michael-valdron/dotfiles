#!/usr/bin/env zsh

# Used to run commands in prompt
setopt PROMPT_SUBST

BAT='/sys/class/power_supply/BAT0'
BAT_STATUS=$BAT'/status'
BAT_PERCENTAGE=$BAT'/capacity'

# Battery percentage function for prompt
function show_bat() {
    if [[ -d "${BAT}" && \
          $(cat $BAT_STATUS) = 'Discharging' ]];
    then
        if [ $TERM = 'xterm-256color' ];
        then
            echo " %B%F{6}$(cat $BAT_PERCENTAGE)%%%b%f"
        else
            echo " $(cat $BAT_PERCENTAGE)%%"
        fi
    fi
}


# Set Private variables
if [ -f ~/.zsh_private ]; then
    source ~/.zsh_private
fi

# Docker Config
if [ -f ~/.zsh_docker ]; then
    source ~/.zsh_docker
fi


# Personal prompt config
if [[ $TERM =~ '^.*-256color$' ]];
then
    PROMPT='%B%F{39}%3~ %f%b %B%F{134}%@%b%f'
    PROMPT+='$(show_bat)'
    PROMPT+=$'\n''%B%F{40}$%f%b%B%F{76}>%f%b '
else
    PROMPT='%~ %@'
    PROMPT+='$(show_bat)'
    PROMPT+=$'\n''$> '
fi

# Get Logo and System Info on load
# screenfetch -E

# Exports
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/bin:$PATH"
export PATH="$GOPATH/bin:$PATH"
export GOPATH="$HOME/go"
export ORTOOLS_LIB="$HOME/.local/lib/ortools"

# Key Fixes
# Referenced from: https://wiki.archlinux.org/index.php/Zsh#Key_bindings
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[ShiftTab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[[ -n "${key[ShiftTab]}"  ]] && bindkey -- "${key[ShiftTab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	  autoload -Uz add-zle-hook-widget
	  function zle_application_mode_start {
		    echoti smkx
	  }
	  function zle_application_mode_stop {
		    echoti rmkx
	  }
	  add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	  add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi
